Design and implement a console-based Warehouse & Shipping app to receive inventory, 
create shipments, and track deliveries using OOP in Java.
Requirements:
1. Create at least 4 classes:
a) Item – sku, name, unitPrice, qtyOnHand.
b) Warehouse – whId, location, capacity, inventory list.
c) Shipment – shipId, destination, items, status, carrier.
d) LogisticsService – inbound/outbound processing, tracking, billing.
2. Each class must include:
a) ≥4 instance/static variables.
b) A constructor to initialize values.
c) ≥5 methods (getters/setters, receive(), pickPack(), dispatch(), updateStatus(), 
shippingCost()).
3. Demonstrate OOPS Concepts:
a) Inheritance → specialized FragileItem/PerishableItem extends Item with storage
b) rules.
c) Method Overloading → shippingCost() by weight-only or 
weight+distance+priority.
d) Method Overriding → different pickPack() or handling for fragile/perishable.
e) Polymorphism → compute costs from a List<Item> with overridden behavior.
f) Encapsulation → guard inventory counts and statuses.
4. Write a Main class (WarehouseAppMain) to test:
a) Receive items, create and dispatch shipments.
b) Update tracking statuses (CREATED→IN_TRANSIT→DELIVERED).
c) Print stock snapshots and shipping cost summaries

SOLUTION:
FragileItem.java
Page 1
1 public class FragileItem extends Item { 
2
3 public FragileItem(String sku, String name, double unitPrice, int qtyOnHand) {
4 super(sku, name, unitPrice, qtyOnHand);
5 }
6
7 @Override
8 public boolean pickPack(int quantity) {
9 System.out.println("Handle with care: Fragile item.");
10 return super.pickPack(quantity);
11 }
12
13 @Override
14 public double shippingCost(double weight) {
15 return super.shippingCost(weight) + 5.0;
16 }
17 }
18
Item.java
Page 1
1 public class Item {
2 protected String sku;
3 protected String name;
4 protected double unitPrice;
5 protected int qtyOnHand;
6
7 public Item(String sku, String name, double unitPrice, int qtyOnHand) {
8 this.sku = sku;
9 this.name = name;
10 this.unitPrice = unitPrice;
11 this.qtyOnHand = qtyOnHand;
12 }
13
14 public String getSku() { return sku; }
15 public void setQtyOnHand(int qty) { this.qtyOnHand = qty; }
16 public int getQtyOnHand() { return qtyOnHand; }
17 public double getUnitPrice() { return unitPrice; }
18
19 public void receive(int quantity) {
20 this.qtyOnHand += quantity;
21 }
22
23 public boolean pickPack(int quantity) {
24 if (qtyOnHand >= quantity) {
25 qtyOnHand -= quantity;
26 return true;
27 }
28 return false;
29 }
30
31 public void dispatch() {
32 System.out.println(name + " dispatched.");
33 }
34
35 public double shippingCost(double weight) {
36 return weight * 1.5;
37 }
38
39 public double shippingCost(double weight, double distance, boolean priority) {
40 double base = weight * 1.5 + distance * 0.5;
41 return priority ? base * 1.25 : base;
42 }
43
44 public String toString() {
45 return sku + " - " + name + " - Qty: " + qtyOnHand;
46 }
47 }
48
LogisticsService.java
Page 1
1 public class LogisticsService { 
2
3 public void processInbound(Warehouse warehouse, Item item, int quantity) {
4 warehouse.receiveItem(item, quantity);
5 }
6
7 public boolean processOutbound(Warehouse warehouse, Shipment shipment) {
8 for (Item item : shipment.getItems()) {
9 if (!warehouse.pickItem(item.getSku(), 1)) {
10 System.out.println("Item " + item.getSku() + " not available in stock.");
11 return false;
12 }
13 }
14 shipment.updateStatus("IN_TRANSIT");
15 return true;
16 }
17
18
19 public void deliverShipment(Shipment shipment) {
20 shipment.updateStatus("DELIVERED");
21 }
22
23 public void generateBilling(Shipment shipment) {
24 double cost = shipment.calculateTotalShippingCost();
25 System.out.println("Billing Generated: $" + cost);
26 }
27 }
28
Shipment.java
Page 1
")");
1 import java.util.ArrayList;
2 import java.util.List;
3
4 public class Shipment {
5 private String shipId;
6 private String destination;
7 private List<Item> items;
8 private String status;
9 private String carrier; 
10
11 public Shipment(String shipId, String destination, String carrier) {
12 this.shipId = shipId;
13 this.destination = destination;
14 this.carrier = carrier;
15 this.status = "CREATED";
16 this.items = new ArrayList<>();
17 }
18
19 public List<Item> getItems() {
20 return items;
21 }
22
23 public void addItem(Item item) {
24 items.add(item);
25 }
26
27 public void updateStatus(String status) {
28 this.status = status;
29 System.out.println("Shipment " + shipId + " status updated to: " + status);
30 }
31
32 public double calculateTotalShippingCost() {
33 double total = 0;
34 for (Item item : items) {
35 total += item.shippingCost(10.0); // Example fixed weight per item
36 }
37 return total;
38 }
39
40 public void printShipmentDetails() {
41 System.out.println("\nShipment ID: " + shipId);
42 System.out.println("Destination: " + destination);
43 System.out.println("Carrier: " + carrier);
44 System.out.println("Status: " + status);
45 System.out.println("Items in Shipment:");
46 for (Item item : items) {
47 System.out.println(" - " + item.getSku() + " (" + item.getClass().getSimpleName() +
48 }
49 System.out.println("Total Shipping Cost: $" + calculateTotalShippingCost());
50 }
51
52 public String getStatus() {
53 return status;
54 }
55
56 public String getShipId() {
57 return shipId;
58 }
Shipment.java
Page 2
59
60 public String getDestination() {
61 return destination;
62 }
63
64 public String getCarrier() {
65 return carrier;
66 }
67 }
68
Warehouse.java
Page 1
1 import java.util.*;
2
3 public class Warehouse {
4 private String whId;
5 private String location;
6 private int capacity;
7 private Map<String, Item> inventory; 
8
9 public Warehouse(String whId, String location, int capacity) {
10 this.whId = whId;
11 this.location = location;
12 this.capacity = capacity;
13 this.inventory = new HashMap<>();
14 }
15
16 public void receiveItem(Item item, int quantity) {
17 item.receive(quantity);
18 inventory.put(item.getSku(), item);
19 System.out.println(quantity + " units of " + item.getSku() + " received.");
20 }
21
22 public boolean pickItem(String sku, int quantity) {
23 Item item = inventory.get(sku);
24 if (item != null) {
25 return item.pickPack(quantity);
26 }
27 return false;
28 }
29
30 public void dispatchItem(String sku) {
31 Item item = inventory.get(sku);
32 if (item != null) {
33 item.dispatch();
34 }
35 }
36
37 public void printInventory() {
38 System.out.println("\nCurrent Inventory:");
39 for (Item item : inventory.values()) {
40 System.out.println(item);
41 }
42 }
43
44 public Item getItem(String sku) {
45 return inventory.get(sku);
46 }
47 }
48
WarehouseAppMain.java
Page 1
1 public class WarehouseAppMain {
2 public static void main(String[] args) {
3 Warehouse warehouse = new Warehouse("WH1", "New York", 1000);
4 LogisticsService logistics = new LogisticsService(); 
5
6 Item laptop = new FragileItem("SKU101", "Laptop", 1000.0, 10);
7 Item apple = new PerishableItem("SKU102", "Apple", 1.0, 50);
8 Item chair = new Item("SKU103", "Chair", 50.0, 20);
9
10 logistics.processInbound(warehouse, laptop, 5);
11 logistics.processInbound(warehouse, apple, 30);
12 logistics.processInbound(warehouse, chair, 10);
13
14 warehouse.printInventory();
15
16 Shipment shipment1 = new Shipment("SHIP001", "Los Angeles", "FedEx");
17 shipment1.addItem(laptop);
18 shipment1.addItem(apple);
19 shipment1.addItem(chair);
20
21 if (logistics.processOutbound(warehouse, shipment1)) {
22 shipment1.printShipmentDetails();
23 }
24
25 logistics.deliverShipment(shipment1);
26 logistics.generateBilling(shipment1);
27 warehouse.printInventory();
28 }
29 }
